# Macro file for the visualization setting in the initialization phase 
# of the WaterTank example when running in interactive mode
#

# Use these open statements to open selected visualization
#
# Use this open statement to create an OpenGL view:
/vis/open OGL 900x700-0+0
#
# Use this open statement to create an OpenInventor view:
#/vis/open OI
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/drawVolume
#
# Specify view angle:
/vis/viewer/set/viewpointVector 0 1 0   # Look along +Y towards origin (side view)
/vis/viewer/set/upVector 0 0 1          # Z axis is up (tank vertical)
/vis/viewer/set/targetPoint 0 0 0 m     # Center the tank
/vis/viewer/set/lightsVector 0 1 0
#
# Specify style (surface, wireframe, auxiliary edges,...)
/vis/viewer/set/style surface
/vis/viewer/set/auxiliaryEdge true
/vis/viewer/set/lineSegmentsPerCircle 100
#
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByCharge
/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
#/vis/scene/add/hits
#
# To draw only gammas:
#/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma
#
# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
#/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/default/setDrawStepPts true
# To select or override default colours (note: e+ is blue by default):
#/vis/modeling/trajectories/list
#/vis/modeling/trajectories/drawByParticleID-0/set e+ yellow
#
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
#
# Decorations
/vis/set/textLayout    # Revert to normal (left adjusted) layout
# Keep default text colour
#
# Axes, scale, etc.
# Remove large red dimension bars and extra decorations
#/vis/scene/add/eventID # Drawn at end of event
#/vis/scene/add/date    # Date stamp
#/vis/scene/add/text 0 0 0 m 20 0 -150 700 cm
#/vis/scene/add/text "100 cm"
#
# To get nice view
# Make the "World" box invisible (also set in code; harmless to repeat)
/vis/geometry/set/visibility World 0 false
# Colours of TankShell and TankWater are set in code; you can override here if desired:
# /vis/geometry/set/colour TankShell 0.95 0.85 0.1 0.3
# /vis/geometry/set/colour TankWater 0.1 0.3 0.95 0.3

/vis/viewer/set/hiddenMarker true
# Nice default zoom so tank fills view comfortably
/vis/viewer/reset
/vis/viewer/zoom 1.8
/vis/viewer/pan 0.00 0.00
#
# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush
